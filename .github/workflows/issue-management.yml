name: Issue Management

on:
  pull_request:
    types: [opened, closed, reopened]
    branches:
      - main
      - develop
  create:
    # 브랜치가 생성될 때
  push:
    branches:
      - '**'
    paths-ignore:
      - 'main'
      - 'develop'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  # PR이 생성되거나 브랜치가 생성될 때 in-progress 라벨 추가 및 담당자 지정
  handle-pr-opened:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract issue numbers from PR body
        id: extract
        uses: ./.github/actions/extract-issue-numbers
        with:
          text: ${{ github.event.pull_request.body }}
          source-type: 'pr-body'
          validate-issues: true
          
      - name: Add in-progress label to linked issues
        if: steps.extract.outputs.issue-count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prAuthor = context.payload.pull_request.user.login;
            const validIssues = '${{ steps.extract.outputs.valid-issues }}'.split(',').filter(n => n);

            for (const issueNumber of validIssues) {
              try {
                // 이슈에 in-progress 라벨 추가
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  labels: ['in-progress']
                });
                
                // 이슈에 PR 작성자를 담당자로 지정
                await github.rest.issues.addAssignees({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  assignees: [prAuthor]
                });
                
                console.log(`Added in-progress label and assigned ${prAuthor} to issue #${issueNumber}`);
              } catch (error) {
                console.log(`Failed to update issue #${issueNumber}: ${error.message}`);
              }
            }
            
            if (validIssues.length === 0) {
              console.log('No valid linked issues found in PR body');
            }

  # 브랜치 생성 시 관련 이슈에 라벨 추가
  handle-branch-created:
    if: github.event_name == 'create' && github.event.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract issue numbers from branch name
        id: extract
        uses: ./.github/actions/extract-issue-numbers
        with:
          text: ${{ github.event.ref }}
          source-type: 'branch-name'
          validate-issues: true
          
      - name: Add in-progress label to related issues
        if: steps.extract.outputs.issue-count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branchName = context.payload.ref;
            const branchAuthor = context.payload.sender.login;
            const validIssues = '${{ steps.extract.outputs.valid-issues }}'.split(',').filter(n => n);

            for (const issueNumber of validIssues) {
              try {
                // 이슈에 in-progress 라벨 추가
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  labels: ['in-progress']
                });
                
                // 브랜치 생성자를 담당자로 지정
                await github.rest.issues.addAssignees({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  assignees: [branchAuthor]
                });
                
                console.log(`Added in-progress label and assigned ${branchAuthor} to issue #${issueNumber} for branch ${branchName}`);
              } catch (error) {
                console.log(`Failed to update issue #${issueNumber}: ${error.message}`);
              }
            }
            
            if (validIssues.length === 0) {
              console.log(`No valid issue numbers found in branch name: ${branchName}`);
            }

  # PR이 머지될 때 연결된 이슈 자동 닫기
  close-linked-issues:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract issue numbers from PR
        id: extract-pr
        uses: ./.github/actions/extract-issue-numbers
        with:
          text: "${{ github.event.pull_request.body || '' }}"
          source-type: 'pr-body'
          validate-issues: true
          
      - name: Extract issue numbers from branch name
        id: extract-branch
        uses: ./.github/actions/extract-issue-numbers
        with:
          text: ${{ github.event.pull_request.head.ref }}
          source-type: 'branch-name'
          validate-issues: true
          
      - name: Close related issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            
            const prIssues = '${{ steps.extract-pr.outputs.valid-issues }}'.split(',').filter(n => n);
            const branchIssues = '${{ steps.extract-branch.outputs.valid-issues }}'.split(',').filter(n => n);
            
            // 중복 제거하여 모든 이슈 번호 합치기
            const allIssues = [...new Set([...prIssues, ...branchIssues])];

            if (allIssues.length > 0) {
              for (const issueNumber of allIssues) {
                try {
                  await github.rest.issues.update({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    state: 'closed'
                  });
                  
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    body: `이 이슈는 PR #${prNumber} (${prTitle})가 병합되어 자동으로 닫혔습니다.`
                  });
                  
                  console.log(`Closed issue #${issueNumber} via PR #${prNumber}`);
                } catch (error) {
                  console.log(`Failed to close issue #${issueNumber}: ${error.message}`);
                }
              }
            } else {
              console.log(`No valid issue numbers found in PR #${prNumber}`);
            }

  # PR이 다시 열릴 때 이슈도 다시 열기
  reopen-linked-issues:
    if: github.event_name == 'pull_request' && github.event.action == 'reopened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract issue numbers from PR
        id: extract-pr
        uses: ./.github/actions/extract-issue-numbers
        with:
          text: "${{ github.event.pull_request.body || '' }}"
          source-type: 'pr-body'
          validate-issues: true
          
      - name: Reopen linked issues
        if: steps.extract-pr.outputs.issue-count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const validIssues = '${{ steps.extract-pr.outputs.valid-issues }}'.split(',').filter(n => n);

            for (const issueNumber of validIssues) {
              try {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  state: 'open'
                });
                
                // completed 라벨 제거하고 in-progress 라벨 추가
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    name: 'completed'
                  });
                } catch (error) {
                  console.log(`completed label not found on issue #${issueNumber}`);
                }
                
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  labels: ['in-progress']
                });
                
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: `🔄 이 이슈는 PR #${prNumber}이 다시 열려서 재개되었습니다.`
                });
                
                console.log(`Reopened issue #${issueNumber}`);
              } catch (error) {
                console.log(`Failed to reopen issue #${issueNumber}: ${error.message}`);
              }
            }
            
            if (validIssues.length === 0) {
              console.log(`No valid issue numbers found in PR #${prNumber}`);
            }
