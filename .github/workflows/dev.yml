name: dev 환경 릴리즈

on:
  push:
    branches: [dev]

env:
  IMAGE: ghcr.io/modern-agile-team/quiz-game-io-front
  APP: quiz-game-io-front

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 24
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'yarn'
      - name: clean yarn cache
        run: yarn cache clean
      - name: Install & Build
        shell: bash
        run: |
          yarn install
          VITE_APP_ENV=dev \
          VITE_API_URL='${{ vars.VITE_API_URL }}' \
          VITE_SOCKET_URL='${{ vars.VITE_SOCKET_URL }}' \
          yarn build:dev
          mkdir -p releases && mv dist releases/build
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            APP_PORT=${{ vars.VITE_APP_PORT }}
          tags: |
            ${{ env.IMAGE }}:latest-dev
            ${{ env.IMAGE }}:dev-${{ github.sha }}

  deploy:
    needs: [build-and-push]
    runs-on: self-hosted
    environment:
      name: dev
    permissions:
      contents: read
      packages: read
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull & Resolve
        id: r
        run: |
          I=${{ env.IMAGE }}:latest-dev
          docker pull "$I"
          echo "image=$(docker inspect --format='{{index .RepoDigests 0}}' $I)" >> $GITHUB_OUTPUT
      - name: Run
        env:
          NAME: ${{ env.APP }}-dev
          PORT: ${{ vars.VITE_APP_PORT }}
        run: |
          docker rm -f "$NAME" || true
          docker run -d --name "$NAME" --restart unless-stopped \
            -e PORT="$PORT" -p "$PORT:$PORT" "${{ steps.r.outputs.image }}"
      - run: docker image prune -f
