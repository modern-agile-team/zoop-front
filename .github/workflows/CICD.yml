name: CI & CD (Integrate → Approve → Deploy)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      env:
        description: 'dev or prod'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  BUILD_DIR: build
  APP_NAME: quiz-game-io-front
  PORT: '3000'

jobs:
  integrate:
    name: Integrate (Build & Upload Artifact)
    runs-on: self-hosted
    timeout-minutes: 20
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: yarn

      - name: Install deps
        run: yarn install --frozen-lockfile

      # 필요 시 Lint/Test 추가
      # - run: yarn lint
      # - run: yarn test --if-present --ci

      - name: Build
        run: yarn build

      - name: Upload artifact (${{ env.BUILD_DIR }})
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}
          if-no-files-found: error
          retention-days: 3

  # 🔹 배포 대상 환경(dev/prod) 계산 전용 잡
  determine-env:
    name: Determine target environment
    needs: [integrate]
    runs-on: self-hosted
    outputs:
      target_env: ${{ steps.set.outputs.target_env }}
    steps:
      - name: Set target_env output
        id: set
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "target_env=${{ inputs.env }}" >> "$GITHUB_OUTPUT"
          else
            if [[ "${{ github.ref_name }}" == "develop" ]]; then
              echo "target_env=dev" >> "$GITHUB_OUTPUT"
            else
              echo "target_env=prod" >> "$GITHUB_OUTPUT"
            fi
          fi

  deploy:
    name: Deploy (Requires Approval)
    needs: [integrate, determine-env]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: self-hosted

    # 🔒 Environments(dev/prod)에서 Required reviewers 설정 시 여기서 승인 대기 → 승인 후 진행
    environment:
      name: ${{ needs.determine-env.outputs.target_env }}

    concurrency:
      group: deploy-${{ needs.determine-env.outputs.target_env }}
      cancel-in-progress: false

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          # Environments(dev/prod)에 동일 키 이름(SSH_PRIVATE_KEY)로 저장해 두세요
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prepare dirs on remote
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }} \
            "mkdir -p '${{ secrets.TARGET_PATH }}/releases' '${{ secrets.TARGET_PATH }}/shared'"

      - name: Upload release (rsync)
        id: upload
        shell: bash
        run: |
          REL="release-$(date +%Y%m%d-%H%M%S)"
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" "./${{ env.BUILD_DIR }}/" \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}:${{ secrets.TARGET_PATH }}/releases/${REL}/${{ env.BUILD_DIR }}/"
          echo "REL=$REL" >> "$GITHUB_OUTPUT"

      - name: Activate & reload PM2
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }} '
            set -e
            APP_DIR="${{ secrets.TARGET_PATH }}"
            REL="${{ steps.upload.outputs.REL }}"
            BUILD_DIR="${{ env.BUILD_DIR }}"
            APP_NAME="${{ env.APP_NAME }}"
            PORT="${{ env.PORT }}"

            # 심볼릭 링크 전환
            ln -sfn "$APP_DIR/releases/$REL" "$APP_DIR/current"

            # PM2로 정적 서빙
            if pm2 describe "$APP_NAME" > /dev/null; then
              pm2 reload "$APP_NAME"
            else
              yarn global add serve pm2 >/dev/null 2>&1 || true
              cd "$APP_DIR/current/$BUILD_DIR" \
                && pm2 start "serve -s . -l tcp://0.0.0.0:${PORT}" --name "$APP_NAME"
            fi
            pm2 save
          '
