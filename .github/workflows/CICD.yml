name: CI/CD 파이프라인 (통합 → 승인 → 배포)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      env:
        description: 'dev or prod'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  BUILD_DIR: build # ← 프로젝트 빌드 산출물 폴더
  APP_NAME: quiz-game-io-front
  PORT: '3000'

jobs:
  integrate:
    name: 통합 단계 (빌드 및 아티팩트 업로드)
    uses: ./.github/workflows/shared/build.yml
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    with:
      node-version: 'lts/*'
      upload-artifacts: true
      artifact-name: 'site-build'
      artifact-retention-days: 3
      run-lint: true
      runner-type: 'self-hosted'
      install-command: 'frozen-lockfile'
      lint-command: 'check'
      timeout-minutes: 20

  determine-env:
    name: 배포 환경 결정
    needs: [integrate]
    runs-on: self-hosted
    outputs:
      target_env: ${{ steps.set.outputs.target_env }}
    steps:
      - id: set
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "target_env=${{ inputs.env }}" >> "$GITHUB_OUTPUT"
          else
            if [[ "${{ github.ref_name }}" == "develop" ]]; then
              echo "target_env=dev" >> "$GITHUB_OUTPUT"
            else
              echo "target_env=prod" >> "$GITHUB_OUTPUT"
            fi
          fi

  deploy:
    name: 배포 (승인 필요)
    needs: [integrate, determine-env]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: self-hosted

    # 🔒 Environments(dev/prod)에서 Required reviewers 설정 시 여기서 승인 대기
    environment:
      name: ${{ needs.determine-env.outputs.target_env }}

    concurrency:
      group: deploy-${{ needs.determine-env.outputs.target_env }}
      cancel-in-progress: false

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ${{ env.BUILD_DIR }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure deploy dir exists
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }} \
            "mkdir -p '${{ secrets.TARGET_PATH }}/releases/${{ env.BUILD_DIR }}'"

      - name: Upload (rsync overwrite)
        shell: bash
        run: |
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" \
            "./${{ env.BUILD_DIR }}/" \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}:${{ secrets.TARGET_PATH }}/releases/${{ env.BUILD_DIR }}/"

      - name: Start/Reload PM2 (robust)
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }} '
            set -e

            APP_DIR="${{ secrets.TARGET_PATH }}"
            BUILD_DIR="${{ env.BUILD_DIR }}"
            APP_NAME="${{ env.APP_NAME }}"
            PORT="${{ env.PORT }}"

            # --- PATH 보정: 비로그인 ssh에서 전역 bin 경로가 비는 문제 대응
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/.npm-global/bin:$HOME/.local/bin:$PATH"

            # --- PM2 / serve 미설치 시 사용자 영역에 설치 (sudo 불필요)
            if ! command -v pm2 >/dev/null 2>&1; then
              command -v corepack >/dev/null 2>&1 && corepack enable || true
              # yarn 전역 설치 시도 → 실패하면 npm 사용자 prefix로 설치
              yarn global add pm2 serve >/dev/null 2>&1 || {
                mkdir -p "$HOME/.npm-global"
                npm config set prefix "$HOME/.npm-global"
                npm i -g pm2 serve >/dev/null 2>&1
                export PATH="$HOME/.npm-global/bin:$PATH"
              }
            fi

            PM2="$(command -v pm2)"

            # --- 앱 실행/재시작
            if "$PM2" describe "$APP_NAME" >/dev/null 2>&1; then
              "$PM2" reload "$APP_NAME"
            else
              cd "$APP_DIR/releases/$BUILD_DIR"
              "$PM2" start "serve -s . -l tcp://0.0.0.0:${PORT}" --name "$APP_NAME"
            fi

            "$PM2" save
          '
