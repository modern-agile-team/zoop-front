name: 배포 파이프라인

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      env:
        description: dev or prod
        required: true
        default: dev
        type: choice
        options: [dev, prod]

env:
  IMAGE: ghcr.io/modern-agile-team/quiz-game-io-front
  APP: quiz-game-io-front

jobs:
  determine:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.o.outputs.env }}
    steps:
      - id: o
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "env=${{ inputs.env }}" >> "$GITHUB_OUTPUT"
          else
            [[ "${{ github.ref_name }}" == "develop" ]] && E=dev || E=prod
            echo "env=$E" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    needs: determine
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.determine.outputs.env }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          check-latest: true
      - uses: actions/checkout@v4
      - name: Install & Build
        shell: bash
        run: |
          yarn install --frozen-lockfile
          VITE_APP_ENV=${{ needs.determine.outputs.env }} \
          VITE_API_URL='${{ vars.VITE_API_URL }}' \
          VITE_SOCKET_URL='${{ vars.VITE_SOCKET_URL }}' \
          yarn build:${{ needs.determine.outputs.env }}
          mkdir -p releases && mv build releases/build
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            APP_PORT=${{ vars.VITE_APP_PORT }}
          tags: ${{ env.IMAGE }}-${{ needs.determine.outputs.env }}

  deploy:
    needs: [determine, build-and-push]
    runs-on: self-hosted
    environment:
      name: ${{ needs.determine.outputs.env }}
    permissions:
      contents: read
      packages: read
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull & Resolve
        id: r
        run: |
          I=${{ env.IMAGE }}:latest-${{ needs.determine.outputs.env }}
          docker pull "$I"
          echo "image=$(docker inspect --format='{{index .RepoDigests 0}}' $I)" >> $GITHUB_OUTPUT
      - name: Run
        env:
          NAME: ${{ env.APP }}-${{ needs.determine.outputs.env }}
          PORT: ${{ vars.VITE_APP_PORT }}
        run: |
          docker rm -f "$NAME" || true
          docker run -d --name "$NAME" --restart unless-stopped \
            -e PORT="$PORT" -p "$PORT:$PORT" "${{ steps.r.outputs.image }}"
      - run: docker image prune -f
