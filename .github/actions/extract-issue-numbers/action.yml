name: '이슈 번호 추출'
description: 'PR 본문이나 브랜치명에서 이슈 번호를 추출하는 공통 액션'

inputs:
  text:
    description: 'Text to extract issue numbers from (PR body, branch name, etc.)'
    required: true
  source-type:
    description: 'Type of source: pr-body, branch-name, or commit-messages'
    required: false
    default: 'pr-body'
  validate-issues:
    description: 'Whether to validate that issues actually exist'
    required: false
    default: 'true'
  pr-number:
    description: 'PR number for commit message extraction'
    required: false

outputs:
  issue-numbers:
    description: 'Comma-separated list of issue numbers'
    value: ${{ steps.extract.outputs.numbers }}
  issue-count:
    description: 'Number of issues found'
    value: ${{ steps.extract.outputs.count }}
  valid-issues:
    description: 'Comma-separated list of valid issue numbers (if validation enabled)'
    value: ${{ steps.validate.outputs.valid }}

runs:
  using: 'composite'
  steps:
    - name: Extract issue numbers
      id: extract
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TEXT="${{ inputs.text }}"
        SOURCE_TYPE="${{ inputs.source-type }}"
        PR_NUMBER="${{ inputs.pr-number }}"

        if [ "$SOURCE_TYPE" = "commit-messages" ] && [ -n "$PR_NUMBER" ]; then
          # 커밋 메시지는 GitHub API로 가져오기
          COMMITS_JSON=$(gh api "repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" --jq '.[].commit.message')
          TEXT="$COMMITS_JSON"
        fi

        # JavaScript 스크립트로 이슈 번호 추출
        cat > extract_issues.js << 'EOF'
        const text = process.argv[2];
        const sourceType = process.argv[3];

        let patterns = [];

        if (sourceType === 'branch-name') {
          patterns = [
            /feature-(\d+)/gi,
            /feature\/(\d+)/gi,
            /bugfix-(\d+)/gi,
            /bugfix\/(\d+)/gi,
            /hotfix-(\d+)/gi,
            /hotfix\/(\d+)/gi,
            /(\d+)/g
          ];
        } else {
          // PR body, commit message
          patterns = [
            /(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
            /(?:^|\s)#(\d+)(?:\s|$)/g,
            /이슈\s*#?(\d+)/gi,
            /issue\s*#?(\d+)/gi
          ];
        }

        let allIssueNumbers = new Set();

        for (const pattern of patterns) {
          const matches = [...text.matchAll(pattern)];
          matches.forEach(match => {
            const issueNumber = match[match.length - 1];
            if (issueNumber && !isNaN(issueNumber)) {
              allIssueNumbers.add(issueNumber);
            }
          });
        }

        const numbers = Array.from(allIssueNumbers);
        console.log('NUMBERS=' + numbers.join(','));
        console.log('COUNT=' + numbers.length);
        EOF

        OUTPUT=$(node extract_issues.js "$TEXT" "$SOURCE_TYPE")
        eval $OUTPUT

        echo "numbers=$NUMBERS" >> $GITHUB_OUTPUT
        echo "count=$COUNT" >> $GITHUB_OUTPUT

        rm extract_issues.js

    - name: Validate issue numbers
      id: validate
      if: inputs.validate-issues == 'true' && steps.extract.outputs.count > 0
      uses: actions/github-script@v7
      with:
        script: |
          const numbers = '${{ steps.extract.outputs.numbers }}'.split(',').filter(n => n);
          const { owner, repo } = context.repo;
          const validIssues = [];

          for (const issueNumber of numbers) {
            try {
              await github.rest.issues.get({
                owner,
                repo,
                issue_number: issueNumber
              });
              validIssues.push(issueNumber);
              console.log(`✅ Issue #${issueNumber} exists`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`❌ Issue #${issueNumber} not found`);
              } else {
                console.log(`⚠️ Error checking issue #${issueNumber}: ${error.message}`);
              }
            }
          }

          return validIssues.join(',');

    - name: Set validation output
      if: inputs.validate-issues == 'true'
      shell: bash
      run: |
        VALID="${{ steps.validate.outputs.result || '' }}"
        echo "valid=$VALID" >> $GITHUB_OUTPUT
